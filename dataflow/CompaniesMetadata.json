{
	"name": "CompaniesMetadata",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CompaniesExcel",
						"type": "DatasetReference"
					},
					"name": "ReadCompaniesSource"
				},
				{
					"dataset": {
						"referenceName": "CompaniesSQL",
						"type": "DatasetReference"
					},
					"name": "ReadCompaniesLoaded"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CompaniesSQL",
						"type": "DatasetReference"
					},
					"name": "InsertinSQL"
				}
			],
			"transformations": [
				{
					"name": "CheckforDuplicatesCompanies"
				},
				{
					"name": "CheckCompaniesUpdate"
				},
				{
					"name": "MarkCompanies"
				},
				{
					"name": "TransformTypeCompanies"
				},
				{
					"name": "FilterExistingRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          company_id as string,",
				"          company as string,",
				"          contact as string,",
				"          region as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: false) ~> ReadCompaniesSource",
				"source(output(",
				"          Company_ID as integer,",
				"          Company as string,",
				"          Contact as string,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ReadCompaniesLoaded",
				"ReadCompaniesSource aggregate(groupBy(company_id,",
				"          company,",
				"          contact,",
				"          region),",
				"     Dummy = sum(1)) ~> CheckforDuplicatesCompanies",
				"TransformTypeCompanies, ReadCompaniesLoaded join(TransformTypeCompanies@company_id == ReadCompaniesLoaded@Company_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CheckCompaniesUpdate",
				"FilterExistingRows@Retain alterRow(updateIf(FilterExistingRows@Retain@company_id != FilterExistingRows@Retain@Company_ID || FilterExistingRows@Retain@company != FilterExistingRows@Retain@Company || FilterExistingRows@Retain@contact != FilterExistingRows@Retain@Contact || FilterExistingRows@Retain@region != FilterExistingRows@Retain@Region)) ~> MarkCompanies",
				"CheckforDuplicatesCompanies derive(company_id = toInteger(company_id)) ~> TransformTypeCompanies",
				"CheckCompaniesUpdate split((TransformTypeCompanies@company_id != ReadCompaniesLoaded@Company_ID || CheckforDuplicatesCompanies@company != ReadCompaniesLoaded@Company || CheckforDuplicatesCompanies@contact != ReadCompaniesLoaded@Contact || CheckforDuplicatesCompanies@region != ReadCompaniesLoaded@Region) \r",
				"|| (isNull(ReadCompaniesLoaded@Company_ID) && isNull(ReadCompaniesLoaded@Company) && isNull(ReadCompaniesLoaded@Contact) && isNull(ReadCompaniesLoaded@Region)),",
				"     disjoint: false) ~> FilterExistingRows@(Retain, Ignore)",
				"MarkCompanies sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          Company_ID as integer,",
				"          Company as string,",
				"          Contact as string,",
				"          Region as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Company_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Company_ID = FilterExistingRows@Retain@company_id,",
				"          Company = FilterExistingRows@Retain@company,",
				"          Contact = FilterExistingRows@Retain@contact,",
				"          Region = FilterExistingRows@Retain@region",
				"     )) ~> InsertinSQL"
			]
		}
	}
}