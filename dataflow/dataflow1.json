{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SouthSource",
						"type": "DatasetReference"
					},
					"name": "Json"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "FlattenJson"
				},
				{
					"name": "RenameXlsx2Columns"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          sample_data_south as (Order as string, Date as string, {Date Shipped} as string, {Shipping Method} as string, {Customer Number} as string, Segment as string, {Postal Code 1} as string, {Product ID} as string, Sales as string, Quantity as string, Discount as string, Profit as string)[]",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: false,",
				"     rowUrlColumn: 'Source File',",
				"     documentForm: 'documentPerLine') ~> Json",
				"Json foldDown(unroll(sample_data_south),",
				"     mapColumn(",
				"          {Customer ID} = sample_data_south.{Customer Number},",
				"          {Order Date} = sample_data_south.Date,",
				"          {Ship Date} = sample_data_south.{Date Shipped},",
				"          Discount = sample_data_south.Discount,",
				"          {Order ID} = sample_data_south.Order,",
				"          {Postal Code} = sample_data_south.{Postal Code 1},",
				"          {Product ID} = sample_data_south.{Product ID},",
				"          Profit = sample_data_south.Profit,",
				"          Quantity = sample_data_south.Quantity,",
				"          Sales = sample_data_south.Sales,",
				"          Segment = sample_data_south.Segment,",
				"          {Ship Mode} = sample_data_south.{Shipping Method},",
				"          {Source File}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenJson",
				" select(mapColumn(",
				"          {Order ID} = Column_1,",
				"          {Order Date} = Column_2,",
				"          {Ship Date} = Column_3,",
				"          {Ship Mode} = Column_4,",
				"          {Customer ID} = Column_5,",
				"          Segment = Column_6,",
				"          {Postal Code} = Column_7,",
				"          {Product ID} = Column_8,",
				"          Sales = Column_9,",
				"          Quantity = Column_10,",
				"          Discount = Column_11,",
				"          Profit = Column_12,",
				"          {Source File}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameXlsx2Columns",
				"FlattenJson aggregate(groupBy({Source File}),",
				"     RowCount = sum(1)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}