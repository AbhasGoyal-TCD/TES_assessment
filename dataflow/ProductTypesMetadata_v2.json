{
	"name": "ProductTypesMetadata_v2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ProductTypesExcel",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				},
				{
					"dataset": {
						"referenceName": "ProductTypesSQL",
						"type": "DatasetReference"
					},
					"name": "ReadSQL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ProductTypesSQL",
						"type": "DatasetReference"
					},
					"name": "InsertinSQL",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "DumpNullMetaRows",
						"type": "DatasetReference"
					},
					"name": "RecordNullRows"
				},
				{
					"dataset": {
						"referenceName": "MetaDataLogs",
						"type": "DatasetReference"
					},
					"name": "AddLogs"
				}
			],
			"transformations": [
				{
					"name": "CheckforDuplicates"
				},
				{
					"name": "CheckUpdate"
				},
				{
					"name": "MarkUpdates"
				},
				{
					"name": "FilterExistingRows"
				},
				{
					"name": "SourceRowCount"
				},
				{
					"name": "DuplicateRowCount"
				},
				{
					"name": "ErrorRowCount"
				},
				{
					"name": "IgnoreRowCount"
				},
				{
					"name": "MergeDuplicateRows"
				},
				{
					"name": "MergeErrorRows"
				},
				{
					"name": "MergeIgnoreRows"
				},
				{
					"name": "FixNulls"
				},
				{
					"name": "AddSourceFile"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_type as string,",
				"          product_category as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false) ~> ReadSource",
				"source(output(",
				"          Product_Type as string,",
				"          Product_Category as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ReadSQL",
				"AddSourceFile aggregate(groupBy(product_type,",
				"          product_category,",
				"          Source_File),",
				"     Dummy = sum(1)) ~> CheckforDuplicates",
				"CheckforDuplicates, ReadSQL join(CheckforDuplicates@product_type == ReadSQL@Product_Type,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CheckUpdate",
				"FilterExistingRows@Retain alterRow(updateIf(FilterExistingRows@Retain@product_category!=FilterExistingRows@Retain@Product_Category\r",
				")) ~> MarkUpdates",
				"CheckUpdate split((CheckforDuplicates@product_category != CheckforDuplicates@product_category ) \r",
				"&& (!isNull(CheckforDuplicates@product_type) && !isNull(CheckforDuplicates@product_category)),",
				"     (isNull(CheckforDuplicates@product_type) || isNull(CheckforDuplicates@product_category) ),",
				"     disjoint: false) ~> FilterExistingRows@(Retain, FilterNullRows, Ignore)",
				"AddSourceFile aggregate(groupBy(Source_File),",
				"     SRowCount = sum(1)) ~> SourceRowCount",
				"CheckforDuplicates aggregate(groupBy(Source_File),",
				"     DuplicateRowCount = sum(iif(Dummy != 1, Dummy - 1, toLong(0)))) ~> DuplicateRowCount",
				"FilterExistingRows@FilterNullRows aggregate(groupBy(Source_File),",
				"     ERowcount = sum(1)) ~> ErrorRowCount",
				"FilterExistingRows@Ignore aggregate(groupBy(Source_File),",
				"     IRowCount = sum(1)) ~> IgnoreRowCount",
				"SourceRowCount, DuplicateRowCount join(SourceRowCount@Source_File == DuplicateRowCount@Source_File,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeDuplicateRows",
				"MergeDuplicateRows, ErrorRowCount join(SourceRowCount@Source_File == ErrorRowCount@Source_File,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeErrorRows",
				"MergeErrorRows, IgnoreRowCount join(SourceRowCount@Source_File == IgnoreRowCount@Source_File,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeIgnoreRows",
				"MergeIgnoreRows derive(DuplicateRowCount = iif(isNull(DuplicateRowCount),0,toInteger(DuplicateRowCount)),",
				"          ERowcount = iif(isNull(ERowcount),0,toInteger(ERowcount)),",
				"          IRowCount = iif(isNull(IRowCount),0,toInteger(IRowCount))) ~> FixNulls",
				"ReadSource derive(Source_File = 'ProductTypes') ~> AddSourceFile",
				"MarkUpdates sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          Product_Type as string,",
				"          Product_Category as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Product_Type'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     outputRejectedData: true,",
				"     rejectedData_container: 'tesmetadata',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          Product_Type = FilterExistingRows@Retain@product_type,",
				"          Product_Category = FilterExistingRows@Retain@product_category",
				"     )) ~> InsertinSQL",
				"FilterExistingRows@FilterNullRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RecordNullRows",
				"FixNulls sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          SOURCE_FILE as string,",
				"          SOURCE_ROW_COUNT as integer,",
				"          ERROR_ROWS as integer,",
				"          DUPLICATE_ROW_COUNT as integer,",
				"          IGNORE_ROW_COUNT as integer,",
				"          FINAL_COUNT as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE_FILE = SourceRowCount@Source_File,",
				"          SOURCE_ROW_COUNT = SRowCount,",
				"          ERROR_ROWS = ERowcount,",
				"          DUPLICATE_ROW_COUNT = DuplicateRowCount,",
				"          IGNORE_ROW_COUNT = IRowCount",
				"     )) ~> AddLogs"
			]
		}
	}
}