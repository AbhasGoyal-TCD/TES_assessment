{
	"name": "RemoveLatestData",
	"properties": {
		"activities": [
			{
				"name": "ChecktoDeleteCentral",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.RemoveCentralData, bool(1) )",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "DeleteCentralLatest",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA\nwhere SOURCE_FILE like '/Central_Data/%' and  Create_Timestamp = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/Central_Data/%')"
									}
								]
							}
						},
						{
							"name": "DeleteCentralLog",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "DeleteCentralLatest",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA_LOGS\nwhere SOURCE_FILE like '/Central_Data/%' and  TIMESTAMP = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/Central_Data/%')"
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "ChecktoDeleteEast",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.RemoveEastData, bool(1) )",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "DeleteEastLatest",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA\nwhere SOURCE_FILE like '/East_Data/%' and  Create_Timestamp = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/East_Data/%')"
									}
								]
							}
						},
						{
							"name": "DeleteEastLog",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "DeleteEastLatest",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA_LOGS\r\nwhere SOURCE_FILE like '/East_Data/%' and  TIMESTAMP = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/East_Data/%')"
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "ChecktoDeleteWest",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.RemoveWestData, bool(1) )",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "DeleteWestLatest",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA\nwhere SOURCE_FILE like '/West_Data/%' and  Create_Timestamp = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/West_Data/%')"
									}
								]
							}
						},
						{
							"name": "DeleteWestLog",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "DeleteWestLatest",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA_LOGS\r\nwhere SOURCE_FILE like '/West_Data/%' and  TIMESTAMP = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/West_Data/%')"
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "ChecktoDeleteSouth",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.RemoveSouthData, bool(1) )",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "DeleteSouthLatest",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA\nwhere SOURCE_FILE like '/West_Data/%' and  Create_Timestamp = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/West_Data/%')"
									}
								]
							}
						},
						{
							"name": "DeleteSouthLog",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "DeleteSouthLatest",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": "delete from MERGED_DATA_LOGS\r\nwhere SOURCE_FILE like '/South_Data/%' and  TIMESTAMP = (select MAX(Create_Timestamp) from MERGED_DATA WHERE SOURCE_FILE like '/South_Data/%')"
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"RemoveCentralData": {
				"type": "bool",
				"defaultValue": false
			},
			"RemoveEastData": {
				"type": "bool",
				"defaultValue": false
			},
			"RemoveSouthData": {
				"type": "bool",
				"defaultValue": false
			},
			"RemoveWestData": {
				"type": "bool",
				"defaultValue": true
			}
		},
		"annotations": []
	}
}